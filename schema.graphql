schema {
  query: RootQueryType
  mutation: RootMutationType
}

input CreateProjectInput {
  category: String!
  name: String!
}

scalar Datetime

input EditProjectInput {
  category: String!
  methods: [ProjectMethodInput]
  name: String!
  publish: Boolean
  tip: String
}

type InputError {
  key: String!
  message: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Post implements Node {
  author: User!

  """The ID of an object"""
  id: ID!
  insertedAt: Datetime
  message: String
  photos: [PostPhoto]
  relatedProject: Project
  relatedProjectName: String
  relatedProjectType: String!
  thumbnail: PostPhoto
}

type PostConnection {
  edges: [PostEdge]
  pageInfo: PageInfo!
}

type PostEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Post
}

type PostPhoto {
  image: String!
  post: Post!
}

type Project implements Node {
  author: User!
  category: ProjectCategory!
  favoriteCount: Int
  fileResources: [ProjectFileResource]

  """The ID of an object"""
  id: ID!
  image: String!
  introduction: String
  likeCount: Int
  materials: [ProjectMaterial]
  methods: [ProjectMethod]
  name: String!
  relatedPostCount: Int
  relatedPosts(after: String, before: String, first: Int, last: Int): PostConnection
  tip: String
  viewCount: Int
}

type ProjectCategory implements Node {
  """The ID of an object"""
  id: ID!
  image: String
  name: String!
  projects: [Project]
}

type ProjectCategoryConnection {
  edges: [ProjectCategoryEdge]
  pageInfo: PageInfo!
}

type ProjectCategoryEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ProjectCategory
}

type ProjectConnection {
  edges: [ProjectEdge]
  pageInfo: PageInfo!
}

type ProjectEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Project
}

type ProjectFileResource {
  name: String!
  order: Int!
  project: Project
  url: String!
}

input ProjectFilter {
  categories: [String]
  name: String
}

type ProjectMaterial {
  amountUnit: String!
  name: String!
  order: Int!
  project: Project
  url: String
}

type ProjectMethod {
  content: String!
  image: String
  order: Int!
  project: Project
  title: String
}

input ProjectMethodInput {
  content: String!
  id: Int
}

enum ProjectOrder {
  HOTEST
  NEWEST
}

type ProjectResult {
  errors: [InputError]
  project: Project
}

enum RankOrder {
  NAME
}

type RootMutationType {
  createProject(input: CreateProjectInput!): ProjectResult
  editProject(input: EditProjectInput!): ProjectResult
}

type RootQueryType {
  allPosts(after: String, before: String, first: Int, last: Int): PostConnection
  allProjectCategories(after: String, before: String, first: Int, last: Int, order: RankOrder = NAME): ProjectCategoryConnection
  allProjects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection

  """Fetches an object given its ID"""
  node(
    """The id of an object."""
    id: ID!
  ): Node
  post(id: ID!): Post
  project(id: ID!): Project
  viewer: User
}

type User {
  favoriteProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
  followedUsers: [User]
  followerCount: Int
  followingCount: Int
  followingUserPosts(after: String, before: String, first: Int, last: Int): PostConnection
  followingUsers: [User]
  image: String
  likedProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
  name: String!
  posts(after: String, before: String, first: Int, last: Int): PostConnection
  projectCount: Int
  projects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection
  viewedProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
}

