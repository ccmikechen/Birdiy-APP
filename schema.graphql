schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Activity implements Node {
  """The ID of an object"""
  id: ID!
  insertedAt: Datetime
  post: Post
  project: Project
}

type ActivityConnection {
  edges: [ActivityEdge]
  pageInfo: PageInfo!
}

type ActivityEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Activity
}

enum ActivityOrder {
  NEWEST
}

input CreatePostInput {
  message: String!
  photos: [PostPhotoInput]
  relatedProjectId: ID
  relatedProjectName: String
  relatedProjectType: RelatedProjectType!
}

input CreateProjectInput {
  name: String!
  topicName: String!
}

scalar Datetime

input EditPostInput {
  id: ID!
  message: String!
  photos: [PostPhotoInput]
  relatedProjectId: ID
  relatedProjectName: String
  relatedProjectType: RelatedProjectType!
}

input EditProjectInput {
  fileResources: [ProjectFileResourceInput]
  id: ID!
  image: Upload
  introduction: String
  materials: [ProjectMaterialInput]
  methods: [ProjectMethodInput]
  name: String!
  publish: Boolean
  source: String
  tip: String
  topicName: String!
  video: String
}

input EditUserInput {
  image: Upload
  name: String
}

type FollowUserResult {
  followedUser: User!
  followingUser: User!
}

input LoginInput {
  credential: String!
  method: LoginMethod!
}

enum LoginMethod {
  FACEBOOK
  GOOGLE
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Post implements Node {
  author: User!

  """The ID of an object"""
  id: ID!
  insertedAt: Datetime
  message: String
  photos: [PostPhoto]
  photosCount: Int
  relatedProject: Project
  relatedProjectName: String
  relatedProjectType: String!
  thumbnail: PostPhoto
}

type PostConnection {
  edges: [PostEdge]
  pageInfo: PageInfo!
}

type PostEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Post
}

input PostInput {
  id: ID!
}

enum PostOrder {
  NEWEST
}

type PostPhoto implements Node {
  """The ID of an object"""
  id: ID!
  image: String!
  order: Int!
  post: Post!
}

input PostPhotoInput {
  id: ID
  image: Upload
  order: Int!
}

type PostResult {
  post: Post!
}

interface Profile {
  favoriteProjects(after: String, first: Int): ProjectConnection
  followedUsers(after: String, first: Int): UserConnection
  followerCount: Int
  following: Boolean!
  followingCount: Int
  followingUsers(after: String, first: Int): UserConnection
  id: ID!
  image: String
  likedProjects(after: String, first: Int): ProjectConnection
  name: String!
  posts(after: String, beforeId: ID, first: Int, order: PostOrder = NEWEST): PostConnection
  projects(after: String, filter: ProjectFilter, first: Int, order: ProjectOrder = NEWEST): ProjectConnection
}

type Project implements Node {
  author: User!
  deletedAt: Datetime
  favorite: Boolean
  favoriteCount: Int
  fileResources: [ProjectFileResource]

  """The ID of an object"""
  id: ID!
  image: String
  introduction: String
  likeCount: Int
  liked: Boolean
  materials: [ProjectMaterial]
  methods: [ProjectMethod]
  name: String!
  published: Boolean
  publishedAt: Datetime
  relatedPostCount: Int
  relatedPosts(after: String, before: String, first: Int, last: Int): PostConnection
  source: String
  tip: String
  topic: ProjectTopic!
  video: String
  viewCount: Int
  viewed: Boolean
}

type ProjectCategory implements Node {
  """The ID of an object"""
  id: ID!
  image: String
  name: String!
  projects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection
  topics(after: String, before: String, first: Int, last: Int, order: RankOrder = NAME): ProjectTopicConnection
}

type ProjectCategoryConnection {
  edges: [ProjectCategoryEdge]
  pageInfo: PageInfo!
}

type ProjectCategoryEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ProjectCategory
}

type ProjectConnection {
  edges: [ProjectEdge]
  pageInfo: PageInfo!
}

type ProjectEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Project
}

type ProjectFileResource implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  order: Int!
  project: Project
  type: String
  url: String!
}

input ProjectFileResourceInput {
  file: Upload
  id: ID
  name: String!
  order: Int!
  url: String
}

input ProjectFilter {
  categories: [String]
  name: String
  topics: [String]
}

input ProjectInput {
  id: ID!
}

type ProjectMaterial implements Node {
  amountUnit: String!

  """The ID of an object"""
  id: ID!
  name: String!
  order: Int!
  project: Project
  url: String
}

input ProjectMaterialInput {
  amountUnit: String!
  id: ID
  name: String!
  order: Int!
  url: String
}

type ProjectMethod implements Node {
  content: String!

  """The ID of an object"""
  id: ID!
  image: String
  order: Int!
  project: Project
  title: String
}

input ProjectMethodInput {
  content: String!
  id: ID
  image: Upload
  order: Int
  title: String
}

enum ProjectOrder {
  HOTEST
  NEWEST
}

type ProjectResult {
  project: Project!
}

type ProjectTopic implements Node {
  category: ProjectCategory!

  """The ID of an object"""
  id: ID!
  name: String!
  projects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection
}

type ProjectTopicConnection {
  edges: [ProjectTopicEdge]
  pageInfo: PageInfo!
}

type ProjectTopicEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ProjectTopic
}

enum RankOrder {
  NAME
}

input RefreshSessionInput {
  refreshToken: String!
}

enum RelatedProjectType {
  CUSTOM
  PROJECT
}

type RootMutationType {
  cancelFavoriteProject(input: ProjectInput!): ProjectResult
  cancelFollowUser(input: UserInput!): FollowUserResult
  cancelLikeProject(input: ProjectInput!): ProjectResult
  createPost(input: CreatePostInput!): PostResult
  createProject(input: CreateProjectInput!): ProjectResult
  deletePost(input: PostInput!): PostResult
  deleteProject(input: ProjectInput!): ProjectResult
  editAndPublishProject(input: EditProjectInput!): ProjectResult
  editPost(input: EditPostInput!): PostResult
  editProject(input: EditProjectInput!): ProjectResult
  editViewer(input: EditUserInput!): ViewerResult
  favoriteProject(input: ProjectInput!): ProjectResult
  followUser(input: UserInput!): FollowUserResult
  likeProject(input: ProjectInput!): ProjectResult
  login(input: LoginInput!): Session
  publishProject(input: ProjectInput!): ProjectResult
  refreshSession(input: RefreshSessionInput!): Session
  unpublishProject(input: ProjectInput!): ProjectResult
  viewProject(input: ProjectInput!): ProjectResult
}

type RootQueryType {
  allActivities(after: String, before: String, first: Int, last: Int, order: ActivityOrder = NEWEST): ActivityConnection
  allPosts(after: String, before: String, first: Int, last: Int, order: PostOrder = NEWEST): PostConnection
  allProjectCategories(after: String, before: String, first: Int, last: Int, order: RankOrder = NAME): ProjectCategoryConnection
  allProjects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection

  """Fetches an object given its ID"""
  node(
    """The id of an object."""
    id: ID!
  ): Node
  post(id: ID!): Post
  project(id: ID!): Project
  user(id: ID!): User
  viewer: Viewer
}

type Session {
  accessToken: String!
  refreshToken: String!
  user: Viewer!
}

"""
Represents an uploaded file.

"""
scalar Upload

type User implements Profile & Node {
  favoriteProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
  followedUsers(after: String, before: String, first: Int, last: Int): UserConnection
  followerCount: Int
  following: Boolean!
  followingCount: Int
  followingUsers(after: String, before: String, first: Int, last: Int): UserConnection

  """The ID of an object"""
  id: ID!
  image: String
  likedProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
  name: String!
  posts(after: String, before: String, beforeId: ID, first: Int, last: Int, order: PostOrder = NEWEST): PostConnection
  projectCount: Int
  projects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo!
}

type UserEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: User
}

input UserInput {
  id: ID!
}

type Viewer implements Profile & Node {
  favoriteProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
  followedUsers(after: String, before: String, first: Int, last: Int): UserConnection
  followerCount: Int
  following: Boolean!
  followingCount: Int
  followingUserActivities(after: String, before: String, first: Int, last: Int, order: ActivityOrder = NEWEST): ActivityConnection
  followingUserPosts(after: String, before: String, first: Int, last: Int): PostConnection
  followingUsers(after: String, before: String, first: Int, last: Int): UserConnection

  """The ID of an object"""
  id: ID!
  image: String
  likedProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
  name: String!
  posts(after: String, before: String, beforeId: ID, first: Int, last: Int, order: PostOrder = NEWEST): PostConnection
  projectCount: Int
  projects(after: String, before: String, filter: ProjectFilter, first: Int, last: Int, order: ProjectOrder = NEWEST): ProjectConnection
  user: User
  viewedProjects(after: String, before: String, first: Int, last: Int): ProjectConnection
}

type ViewerResult {
  viewer: Viewer!
}

